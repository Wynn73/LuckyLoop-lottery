<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LuckyLoop Lottery</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    :root {
      --primary: #6c5ce7;
      --primary-dark: #5d4aec;
      --secondary: #00cec9;
      --accent: #fd79a8;
      --background: #0f172a;
      --card-bg: #1e293b;
      --text-light: #f1f5f9;
      --text-muted: #94a3b8;
    }
    
    body {
      background: linear-gradient(135deg, var(--background), #0d1b2f);
      color: var(--text-light);
      min-height: 100vh;
      padding: 20px;
      display: flex;
      justify-content: center;
      align-items: center;
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(109, 76, 231, 0.15) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(0, 206, 201, 0.15) 0%, transparent 20%);
    }
    
    .container {
      width: 100%;
      max-width: 800px;
      margin: 0 auto;
    }
    
    header {
      text-align: center;
      margin-bottom: 30px;
    }
    
    .logo {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 15px;
      margin-bottom: 15px;
    }
    
    .logo-icon {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      width: 60px;
      height: 60px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 28px;
    }
    
    h1 {
      font-size: 2.8rem;
      background: linear-gradient(to right, var(--primary), var(--secondary));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 10px;
      letter-spacing: 1px;
    }
    
    .tagline {
      font-size: 1.2rem;
      color: var(--text-muted);
      max-width: 500px;
      margin: 0 auto;
      line-height: 1.6;
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin: 30px 0;
    }
    
    .stat-card {
      background: var(--card-bg);
      border-radius: 16px;
      padding: 25px;
      text-align: center;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
      border: 1px solid rgba(255, 255, 255, 0.05);
      transition: transform 0.3s ease;
    }
    
    .stat-card:hover {
      transform: translateY(-5px);
    }
    
    .stat-card h3 {
      font-size: 1.1rem;
      color: var(--text-muted);
      margin-bottom: 15px;
      font-weight: 500;
    }
    
    .stat-card .value {
      font-size: 2.2rem;
      font-weight: 700;
      background: linear-gradient(to right, var(--secondary), var(--accent));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }
    
    .progress-container {
      background: var(--card-bg);
      border-radius: 16px;
      padding: 25px;
      margin: 30px 0;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
      border: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    .progress-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 15px;
    }
    
    .progress-bar {
      height: 20px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 10px;
      overflow: hidden;
      position: relative;
    }
    
    .progress-fill {
      height: 100%;
      background: linear-gradient(to right, var(--primary), var(--secondary));
      border-radius: 10px;
      width: 45%;
      transition: width 0.5s ease;
    }
    
    .wallet-info {
      background: var(--card-bg);
      border-radius: 16px;
      padding: 25px;
      margin: 30px 0;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
      border: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    .wallet-info h2 {
      margin-bottom: 20px;
      color: var(--text-light);
      font-size: 1.5rem;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .wallet-card {
      background: rgba(30, 41, 59, 0.6);
      border-radius: 12px;
      padding: 20px;
      margin: 15px 0;
      border-left: 4px solid var(--secondary);
      transition: all 0.3s ease;
    }
    
    .wallet-card.active {
      border-left: 4px solid var(--accent);
      background: rgba(30, 41, 59, 0.8);
      transform: translateY(-3px);
      box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);
    }
    
    .wallet-card h3 {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 15px;
      color: var(--text-light);
      font-size: 1.2rem;
    }
    
    .wallet-address {
      font-family: monospace;
      font-size: 0.9rem;
      word-break: break-all;
      color: var(--text-muted);
      background: rgba(0, 0, 0, 0.2);
      padding: 12px 12px 12px 45px;
      border-radius: 8px;
      display: block;
      margin-top: 10px;
      position: relative;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .wallet-address:hover {
      background: rgba(0, 0, 0, 0.3);
    }
    
    .wallet-address::before {
      content: "ðŸ“‹";
      position: absolute;
      left: 15px;
      top: 50%;
      transform: translateY(-50%);
      font-size: 1.2rem;
    }
    
    .wallet-status {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 8px;
      box-shadow: 0 0 10px currentColor;
    }
    
    .wallet-connected {
      background-color: #00cec9;
      animation: pulse 2s infinite;
    }
    
    .wallet-disconnected {
      background-color: #fd79a8;
    }
    
    .enter-section {
      text-align: center;
      margin: 40px 0;
    }
    
    .enter-button {
      background: linear-gradient(to right, var(--primary), var(--primary-dark));
      color: white;
      border: none;
      padding: 18px 40px;
      font-size: 1.2rem;
      font-weight: 600;
      border-radius: 50px;
      cursor: pointer;
      display: inline-flex;
      align-items: center;
      gap: 12px;
      transition: all 0.3s ease;
      box-shadow: 0 10px 25px rgba(108, 92, 231, 0.4);
      position: relative;
      overflow: hidden;
    }
    
    .enter-button:hover {
      transform: translateY(-3px);
      box-shadow: 0 15px 30px rgba(108, 92, 231, 0.6);
    }
    
    .enter-button:disabled {
      background: #94a3b8;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }
    
    .enter-button:disabled:hover {
      transform: none;
    }
    
    .enter-button:after {
      content: "";
      position: absolute;
      top: -50%;
      left: -60%;
      width: 20px;
      height: 200%;
      background: rgba(255, 255, 255, 0.3);
      transform: rotate(25deg);
      transition: all 0.5s;
    }
    
    .enter-button:hover:after {
      left: 110%;
    }
    
    .cost {
      margin-top: 15px;
      font-size: 1.1rem;
      color: var(--text-muted);
    }
    
    .status-container {
      background: var(--card-bg);
      border-radius: 16px;
      padding: 25px;
      margin: 30px 0;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
      border: 1px solid rgba(255, 255, 255, 0.05);
      min-height: 100px;
    }
    
    #status {
      font-size: 1.1rem;
      line-height: 1.6;
      min-height: 80px;
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
    }
    
    .transaction-link {
      color: var(--secondary);
      text-decoration: none;
      word-break: break-all;
      display: inline-block;
      margin-top: 10px;
      font-weight: 600;
    }
    
    .transaction-link:hover {
      text-decoration: underline;
    }
    
    .how-it-works {
      background: var(--card-bg);
      border-radius: 16px;
      padding: 25px;
      margin: 30px 0;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
      border: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    .how-it-works h2 {
      margin-bottom: 20px;
      color: var(--text-light);
      font-size: 1.5rem;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .steps {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-top: 20px;
    }
    
    .step {
      flex: 1;
      min-width: 200px;
      background: rgba(30, 41, 59, 0.6);
      border-radius: 12px;
      padding: 20px;
      text-align: center;
      transition: transform 0.3s ease;
    }
    
    .step:hover {
      transform: translateY(-5px);
    }
    
    .step-number {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 15px;
      font-weight: bold;
    }
    
    footer {
      text-align: center;
      margin-top: 40px;
      color: var(--text-muted);
      font-size: 0.9rem;
      padding-top: 20px;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .wallet-verification {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 20px;
      flex-wrap: wrap;
    }
    
    .verify-btn {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid var(--secondary);
      color: var(--text-light);
      padding: 8px 15px;
      border-radius: 20px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .verify-btn:hover {
      background: rgba(0, 206, 201, 0.2);
      transform: translateY(-2px);
    }
    
    .copy-notification {
      position: fixed;
      bottom: 30px;
      left: 50%;
      transform: translateX(-50%);
      background: var(--primary);
      color: white;
      padding: 12px 25px;
      border-radius: 30px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      z-index: 1000;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .copy-notification.show {
      opacity: 1;
    }
    
    .deploy-section {
      background: var(--card-bg);
      border-radius: 16px;
      padding: 20px;
      margin: 20px 0;
      text-align: center;
    }
    
    .deploy-section h2 {
      margin-bottom: 15px;
      font-size: 1.3rem;
      color: var(--secondary);
    }
    
    .deploy-options {
      display: flex;
      justify-content: center;
      gap: 15px;
      flex-wrap: wrap;
    }
    
    .deploy-btn {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid var(--primary);
      color: var(--text-light);
      padding: 10px 15px;
      border-radius: 8px;
      cursor: pointer;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: all 0.3s ease;
    }
    
    .deploy-btn:hover {
      background: rgba(108, 92, 231, 0.2);
      transform: translateY(-3px);
    }
    
    @media (max-width: 768px) {
      .stats-grid {
        grid-template-columns: 1fr;
      }
      
      h1 {
        font-size: 2.2rem;
      }
      
      .logo {
        flex-direction: column;
        gap: 10px;
      }
      
      .enter-button {
        padding: 15px 30px;
        font-size: 1.1rem;
      }
      
      .wallet-verification {
        flex-direction: column;
        align-items: center;
      }
      
      .wallet-address {
        padding: 12px 12px 12px 40px;
        font-size: 0.8rem;
      }
    }
    
    /* Animations */
    @keyframes pulse {
      0% { opacity: 0.6; box-shadow: 0 0 0 0 rgba(0, 206, 201, 0.7); }
      50% { opacity: 1; }
      100% { opacity: 0.6; box-shadow: 0 0 0 10px rgba(0, 206, 201, 0); }
    }
    
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    .fa-spinner {
      animation: spin 1s linear infinite;
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div class="logo">
        <div class="logo-icon">
          <i class="fas fa-dice"></i>
        </div>
        <h1>LuckyLoop Lottery</h1>
      </div>
      <p class="tagline">Your chance to win big! 100 entries per round. Transparent and secure on the blockchain.</p>
    </header>
    
    <div class="stats-grid">
      <div class="stat-card">
        <h3><i class="fas fa-ticket-alt"></i> Current Entries</h3>
        <div class="value" id="current-entries">45</div>
      </div>
      <div class="stat-card">
        <h3><i class="fas fa-trophy"></i> Current Prize</h3>
        <div class="value">$100</div>
      </div>
      <div class="stat-card">
        <h3><i class="fas fa-clock"></i> Time Remaining</h3>
        <div class="value" id="time-remaining">12:34:21</div>
      </div>
      <div class="stat-card">
        <h3><i class="fas fa-wallet"></i> Entry Cost</h3>
        <div class="value">0.0015 ETH</div>
      </div>
    </div>
    
    <div class="progress-container">
      <div class="progress-header">
        <h3>Round Progress</h3>
        <div id="progress-text">45/100 entries</div>
      </div>
      <div class="progress-bar">
        <div class="progress-fill" id="progress-fill"></div>
      </div>
    </div>
    
    <div class="wallet-info">
      <h2><i class="fas fa-wallet"></i> Wallet Information</h2>
      <div class="wallet-card" id="wallet-a-card">
        <h3>
          <span class="wallet-status wallet-connected" id="wallet-a-status"></span>
          <i class="fas fa-ticket-alt"></i> Lottery Wallet (First 30 entries)
        </h3>
        <div id="wallet-a-address">0xdcbA84e0a9694C450aD9c385cf81C8bAc7C37Cc1</div>
        <div class="wallet-verification">
          <button class="verify-btn" onclick="verifyWallet('0xdcbA84e0a9694C450aD9c385cf81C8bAc7C37Cc1')">
            <i class="fas fa-check-circle"></i> Verify on Etherscan
          </button>
          <button class="verify-btn" onclick="copyToClipboard('0xdcbA84e0a9694C450aD9c385cf81C8bAc7C37Cc1')">
            <i class="fas fa-copy"></i> Copy Address
          </button>
        </div>
      </div>
      <div class="wallet-card" id="wallet-b-card">
        <h3>
          <span class="wallet-status wallet-connected" id="wallet-b-status"></span>
          <i class="fas fa-money-bill-wave"></i> Profit Wallet (Next 70 entries)
        </h3>
        <div id="wallet-b-address">0x31Bd345293BB862A913935551ce0a0101efE5194</div>
        <div class="wallet-verification">
          <button class="verify-btn" onclick="verifyWallet('0x31Bd345293BB862A913935551ce0a0101efE5194')">
            <i class="fas fa-check-circle"></i> Verify on Etherscan
          </button>
          <button class="verify-btn" onclick="copyToClipboard('0x31Bd345293BB862A913935551ce0a0101efE5194')">
            <i class="fas fa-copy"></i> Copy Address
          </button>
        </div>
      </div>
    </div>
    
    <div class="enter-section">
      <button class="enter-button" id="enter-button">
        <i class="fas fa-play-circle"></i> Enter Lottery Now
      </button>
      <div class="cost">Only 0.0015 ETH per entry</div>
    </div>
    
    <div class="status-container">
      <h2><i class="fas fa-info-circle"></i> Status</h2>
      <p id="status" class="pulse">Ready to enter the lottery. Connect your wallet to participate!</p>
    </div>
    
    <div class="deploy-section">
      <h2><i class="fas fa-rocket"></i> Deploy Your Own Lottery</h2>
      <p>Host your own version of LuckyLoop Lottery for free:</p>
      <div class="deploy-options">
        <a href="https://github.com/new" target="_blank" class="deploy-btn">
          <i class="fab fa-github"></i> GitHub Pages
        </a>
        <a href="https://app.netlify.com/start" target="_blank" class="deploy-btn">
          <i class="fab fa-netlify"></i> Netlify
        </a>
        <a href="https://vercel.com/new" target="_blank" class="deploy-btn">
          <i class="fas fa-cloud"></i> Vercel
        </a>
      </div>
    </div>
    
    <div class="how-it-works">
      <h2><i class="fas fa-question-circle"></i> How It Works</h2>
      <div class="steps">
        <div class="step">
          <div class="step-number">1</div>
          <h3>Enter Lottery</h3>
          <p>Click "Enter Now" and confirm the transaction in your wallet</p>
        </div>
        <div class="step">
          <div class="step-number">2</div>
          <h3>First 30 Entries</h3>
          <p>Your entry fee goes to Lottery Wallet for the first 30 participants</p>
        </div>
        <div class="step">
          <div class="step-number">3</div>
          <h3>Next 70 Entries</h3>
          <p>Entries 31-100 go to Profit Wallet to complete the round</p>
        </div>
        <div class="step">
          <div class="step-number">4</div>
          <h3>Winner Selection</h3>
          <p>One winner is randomly selected to receive $100 when the round completes</p>
        </div>
      </div>
    </div>
    
    <footer>
      <p>LuckyLoop Lottery - Powered by Ethereum Blockchain</p>
      <p>This is a demonstration interface. Always verify contract addresses before sending funds.</p>
    </footer>
  </div>
  
  <div class="copy-notification" id="copy-notification">
    <i class="fas fa-check-circle"></i> Address copied to clipboard!
  </div>

  <script>
    // DOM Elements
    const enterButton = document.getElementById('enter-button');
    const statusElement = document.getElementById('status');
    const currentEntriesElement = document.getElementById('current-entries');
    const progressTextElement = document.getElementById('progress-text');
    const progressFillElement = document.getElementById('progress-fill');
    const timeRemainingElement = document.getElementById('time-remaining');
    const walletAStatus = document.getElementById('wallet-a-status');
    const walletBStatus = document.getElementById('wallet-b-status');
    const walletACard = document.getElementById('wallet-a-card');
    const walletBCard = document.getElementById('wallet-b-card');
    const copyNotification = document.getElementById('copy-notification');
    
    // Wallet addresses
    const lotteryWallet = "0xdcbA84e0a9694C450aD9c385cf81C8bAc7C37Cc1";
    const profitWallet = "0x31Bd345293BB862A913935551ce0a0101efE5194";
    
    // Initial state
    let entryCount = parseInt(localStorage.getItem('entryCount') || '45');
    let walletAConnected = false;
    let walletBConnected = false;
    
    // Update UI based on initial state
    updateUI();
    checkWalletStatus();
    
    // Simulated countdown timer
    let hours = 12;
    let minutes = 34;
    let seconds = 21;
    
    // Start the countdown timer
    const timer = setInterval(() => {
      seconds--;
      if (seconds < 0) {
        seconds = 59;
        minutes--;
        if (minutes < 0) {
          minutes = 59;
          hours--;
          if (hours < 0) {
            hours = 23;
          }
        }
      }
      
      timeRemainingElement.textContent = 
        `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }, 1000);
    
    // Update UI function
    function updateUI() {
      currentEntriesElement.textContent = entryCount;
      progressTextElement.textContent = `${entryCount}/100 entries`;
      
      // Update progress bar
      const progressPercent = (entryCount / 100) * 100;
      progressFillElement.style.width = `${progressPercent}%`;
      
      // Update button text
      enterButton.innerHTML = `<i class="fas fa-play-circle"></i> Enter Lottery Now (${entryCount < 30 ? 'Lottery Wallet' : 'Profit Wallet'})`;
      
      // Highlight active wallet
      if (entryCount < 30) {
        walletACard.classList.add('active');
        walletBCard.classList.remove('active');
      } else {
        walletBCard.classList.add('active');
        walletACard.classList.remove('active');
      }
      
      // Disable button if round is full
      if (entryCount >= 100) {
        enterButton.disabled = true;
        enterButton.innerHTML = '<i class="fas fa-ticket-alt"></i> Round Completed';
        statusElement.textContent = 'This round is full! Please wait for the next round.';
      }
    }
    
    // Check wallet connection status
    function checkWalletStatus() {
      // In a real implementation, you would check blockchain connection here
      // For simulation, we'll assume both wallets are always connected
      walletAConnected = true;
      walletBConnected = true;
      
      // Update status indicators
      walletAStatus.className = 'wallet-status ' + (walletAConnected ? 'wallet-connected' : 'wallet-disconnected');
      walletBStatus.className = 'wallet-status ' + (walletBConnected ? 'wallet-connected' : 'wallet-disconnected');
    }
    
    // Wallet verification functions
    function verifyWallet(address) {
      statusElement.innerHTML = `<i class="fas fa-external-link-alt"></i> Opening Etherscan for wallet: ${address.substring(0, 8)}...`;
      setTimeout(() => {
        window.open(`https://etherscan.io/address/${address}`, '_blank');
      }, 500);
    }
    
    function copyToClipboard(text) {
      navigator.clipboard.writeText(text).then(() => {
        showCopyNotification();
        statusElement.innerHTML = `<i class="fas fa-copy"></i> Copied to clipboard: ${text.substring(0, 8)}...`;
      });
    }
    
    function showCopyNotification() {
      copyNotification.classList.add('show');
      setTimeout(() => {
        copyNotification.classList.remove('show');
      }, 2000);
    }
    
    // Simulate MetaMask for demonstration
    window.ethereum = {
      request: async (request) => {
        if (request.method === 'eth_requestAccounts') {
          return new Promise((resolve) => {
            // Show wallet connection status
            statusElement.innerHTML = `<i class="fas fa-plug"></i> Connecting to your wallet...`;
            
            setTimeout(() => {
              resolve(['0x742d35Cc6634C0532925a3b844Bc454e4438f44e']);
              statusElement.innerHTML = `<i class="fas fa-check-circle" style="color:#00cec9"></i> Wallet connected successfully!`;
              
              // Update wallet status indicators
              walletAConnected = true;
              walletBConnected = true;
              walletAStatus.className = 'wallet-status wallet-connected';
              walletBStatus.className = 'wallet-status wallet-connected';
              
              setTimeout(() => {
                statusElement.innerHTML = `Ready to enter the lottery. Click "Enter Now" to participate!`;
              }, 2000);
            }, 1500);
          });
        } else if (request.method === 'eth_sendTransaction') {
          // Simulate transaction
          return new Promise((resolve) => {
            // Show processing status
            statusElement.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Processing your transaction...`;
            
            // Simulate blockchain delay
            setTimeout(() => {
              // Generate mock transaction hash
              const mockTxHash = '0x' + Math.random().toString(36).substring(2, 66);
              
              // Update entry count
              entryCount++;
              localStorage.setItem('entryCount', entryCount.toString());
              
              // Update UI
              updateUI();
              
              // Show success message
              statusElement.innerHTML = `
                <i class="fas fa-check-circle" style="color: #00cec9;"></i> 
                Entry submitted successfully!<br>
                <a href="#" class="transaction-link">View transaction: ${mockTxHash}</a>
              `;
              
              // Resolve with mock transaction hash
              resolve(mockTxHash);
            }, 2000);
          });
        }
      }
    };
    
    // Main lottery function
    async function enterLottery() {
      if (entryCount >= 100) {
        statusElement.textContent = 'This round is full! Please wait for the next round.';
        return;
      }
      
      if (typeof window.ethereum === 'undefined') {
        statusElement.textContent = 'MetaMask is not installed. Using demo mode.';
        
        // Simulate entry in demo mode
        setTimeout(() => {
          entryCount++;
          localStorage.setItem('entryCount', entryCount.toString());
          updateUI();
          statusElement.innerHTML = `
            <i class="fas fa-check-circle" style="color: #00cec9;"></i> 
            Demo entry submitted successfully! (No real transaction)
          `;
        }, 1500);
        return;
      }
      
      try {
        // Request accounts
        const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });
        
        // Determine destination wallet
        const toAddress = entryCount < 30 ? lotteryWallet : profitWallet;
        
        // Prepare transaction
        const tx = {
          from: account,
          to: toAddress,
          value: '0x5391B7000000' // 0.0015 ETH in hex
        };
        
        // Send transaction
        const result = await window.ethereum.request({
          method: 'eth_sendTransaction',
          params: [tx],
        });
        
        // Update entry count
        entryCount++;
        localStorage.setItem('entryCount', entryCount.toString());
        
        // Update UI
        updateUI();
        
        // Show success message
        statusElement.innerHTML = `
          <i class="fas fa-check-circle" style="color: #00cec9;"></i> 
          Entry submitted successfully!<br>
          <a href="#" class="transaction-link">View transaction: ${result}</a>
        `;
        
      } catch (err) {
        statusElement.innerHTML = `
          <i class="fas fa-exclamation-triangle" style="color: #fd79a8;"></i> 
          Error: ${err.message || 'Transaction failed'}
        `;
      }
    }
    
    // Add event listener
    enterButton.addEventListener('click', enterLottery);
    
    // Add copy functionality to wallet addresses
    document.querySelectorAll('.wallet-address').forEach(el => {
      el.addEventListener('click', function() {
        const text = this.textContent.trim();
        navigator.clipboard.writeText(text).then(() => {
          showCopyNotification();
          const originalText = this.textContent;
          this.textContent = 'Copied to clipboard!';
          setTimeout(() => {
            this.textContent = originalText;
          }, 2000);
        });
      });
    });
  </script>
</body>
</html>